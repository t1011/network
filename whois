#!/usr/bin/env python3
import socket
import sys
import re
from tabulate import tabulate

def is_ip_address(input_str):
    """Проверяет, является ли строка IP-адресом."""
    ip_pattern = re.compile(r"^(?:\d{1,3}\.){3}\d{1,3}$")
    return bool(ip_pattern.match(input_str))

def get_tld_server(tld="com"):
    """Получает WHOIS-сервер для TLD."""
    sock = socket.socket()
    try:
        sock.connect(("whois.iana.org", 43))
        sock.send(f"{tld}\n".encode("utf-8"))
        response = sock.recv(4096).decode("utf-8")
        for line in response.splitlines():
            if line.lower().startswith("whois:"):
                return line.split(":", 1)[1].strip()
    except socket.error as e:
        print(f"Ошибка подключения к whois.iana.org: {e}")
        return None
    finally:
        sock.close()

def get_whois_data(query, server=None, is_ip=False):
    """Получает WHOIS-данные для домена или IP."""
    if not server:
        if is_ip:
            server = "whois.arin.net"  # Начальный сервер для IP
        else:
            tld = query.split(".")[-1]
            server = get_tld_server(tld)
            if not server:
                return

    sock = socket.socket()
    try:
        sock.connect((server, 43))
        sock.send(f"{query}\n".encode("utf-8"))
        response = sock.recv(4096).decode("utf-8")
        next_server = None
        for line in response.splitlines():
            if is_ip and line.lower().startswith("referralserver:"):
                next_server = line.split(":", 1)[1].strip().replace("whois://", "")
            yield line

        if next_server:
            for line in get_whois_data(query, next_server, is_ip=True):
                yield line
    except socket.error as e:
        print(f"Ошибка подключения к {server}: {e}")
        return
    finally:
        sock.close()

def process_query(query):
    """Обрабатывает запрос и возвращает данные в виде списка."""
    is_ip = is_ip_address(query)
    data = []
    for line in get_whois_data(query, is_ip=is_ip):
        data.append(line)
    return data

def main():
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <domain or IP>")
        exit(1)

    queries = sys.argv[1:]
    for query in queries:
        print(f"WHOIS data for {query}:")
        data = process_query(query)
        table = []
        for line in data:
            parts = line.split(":", 1)
            if len(parts) == 2:
                table.append([parts[0].strip(), parts[1].strip()])
        print(tabulate(table, headers=["Field", "Value"], tablefmt="grid"))
        print()

if __name__ == "__main__":
    main()
