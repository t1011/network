#!/usr/bin/python3
import requests
import json
from requests.auth import HTTPBasicAuth

# Конфигурация для Confluence API
CONFLUENCE_URL = "https://your-confluence-domain.atlassian.net/wiki/rest/api/content/15656567"
CONFLUENCE_USERNAME = "your-email@example.com"  # Ваш email для входа
CONFLUENCE_API_TOKEN = "your-api-token"        # API-токен из Confluence
PAGE_ID = "15656567"

# Операторы для поиска
OPERATORS = ["megafon", "yota", "beeline", "mts", "t2"]

def fetch_servers_by_operator(operator):
    """Получение данных о серверах для указанного оператора."""
    url = f"https://www.speedtest.net/api/js/servers?engine=js&limit=1000&search={operator}"
    filter_country = "Russia"
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()  # Проверка на ошибки HTTP
        data = response.json()
    except requests.RequestException as e:
        print(f"Ошибка при запросе данных для {operator}: {e}")
        return {}

    grouped_data = {}
    for server in data:
        country = server["country"]
        city = server["name"]
        if filter_country and country != filter_country:
            continue
        if country not in grouped_data:
            grouped_data[country] = []
        grouped_data[country].append(city)
    
    return grouped_data

def generate_table(operator, grouped_data):
    """Генерация HTML-таблицы для оператора."""
    if not grouped_data:
        return f"<h2>{operator.capitalize()}</h2><p>Данные для {operator} отсутствуют</p>"
    
    table_rows = ""
    for country, cities in grouped_data.items():
        cities_str = ", ".join(sorted(cities))  # Сортировка городов для удобства
        table_rows += f"<tr><td>{country}</td><td>{cities_str}</td></tr>"
    
    return f"""
    <h2>{operator.capitalize()}</h2>
    <table>
        <tr><th>Страна</th><th>Города</th></tr>
        {table_rows}
    </table>
    """

def get_current_page_version():
    """Получение текущей версии страницы Confluence."""
    try:
        response = requests.get(
            CONFLUENCE_URL,
            auth=HTTPBasicAuth(CONFLUENCE_USERNAME, CONFLUENCE_API_TOKEN)
        )
        response.raise_for_status()
        page_data = response.json()
        return page_data["version"]["number"]
    except requests.RequestException as e:
        print(f"Ошибка при получении версии страницы: {e}")
        return None

def update_confluence_page(content):
    """Обновление страницы Confluence через REST API."""
    current_version = get_current_page_version()
    if current_version is None:
        print("Не удалось определить версию страницы. Обновление отменено.")
        return

    headers = {"Content-Type": "application/json"}
    payload = {
        "id": PAGE_ID,
        "type": "page",
        "title": "Speedtest Servers by Operator",  # Укажите нужный заголовок страницы
        "space": {"key": "YOUR_SPACE_KEY"},       # Укажите ключ пространства
        "body": {
            "storage": {
                "value": content,
                "representation": "storage"
            }
        },
        "version": {"number": current_version + 1}
    }

    try:
        response = requests.put(
            CONFLUENCE_URL,
            auth=HTTPBasicAuth(CONFLUENCE_USERNAME, CONFLUENCE_API_TOKEN),
            headers=headers,
            data=json.dumps(payload)
        )
        response.raise_for_status()
        print("Страница Confluence успешно обновлена.")
    except requests.RequestException as e:
        print(f"Ошибка при обновлении страницы Confluence: {e}")

def main():
    """Основная логика скрипта."""
    # Собираем данные для всех операторов
    all_data = {}
    for operator in OPERATORS:
        print(f"Сбор данных для {operator}...")
        all_data[operator] = fetch_servers_by_operator(operator)

    # Генерируем таблицы в требуемом порядке
    page_content = ""
    for operator in ["megafon", "yota", "beeline", "mts", "t2"]:
        table = generate_table(operator, all_data[operator])
        page_content += table

    # Обновляем страницу Confluence
    update_confluence_page(page_content)

if __name__ == "__main__":
    main()
