import subprocess
import paramiko
import requests
import json
import os
import base64
import logging
from datetime import datetime
from typing import Dict, List, Tuple

# Настройка логирования
logging.basicConfig(
    filename='/home/andrey/works/confluence.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filemode='w'
)

# Конфигурация для Confluence
CONFLUENCE_URL = "https://your-confluence-domain.atlassian.net/wiki/rest/api/content"
PAGE_ID = "1550845723"
USERNAME = "your-email@example.com"
API_TOKEN = "your-api-token"

# Функция для чтения хостов из файла inventory
def read_inventory() -> List[Tuple[str, str]]:
    inventory_path = os.path.join(os.path.dirname(__file__), "inventory")
    try:
        with open(inventory_path, "r") as f:
            hosts = []
            for line in f:
                line = line.strip()
                if line:
                    parts = line.split()
                    if len(parts) == 2:
                        hostname, ip = parts
                        hosts.append((hostname, ip))
                    elif len(parts) == 1:
                        ip = parts[0]
                        hosts.append((None, ip))
            return hosts
    except FileNotFoundError:
        logging.error(f"Файл {inventory_path} не найден!")
        return []
    except Exception as e:
        logging.error(f"Ошибка при чтении inventory: {e}")
        return []

# Функция для получения имени хоста и IP-адресов с хоста
def get_host_data(host: str, predefined_hostname: str = None) -> Tuple[str, Dict[str, List[str]], Dict[str, List[str]]]:
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(host, timeout=10)
        
        if predefined_hostname is None:
            stdin, stdout, stderr = ssh.exec_command("hostname", timeout=5)
            hostname = stdout.read().decode().strip()
        else:
            hostname = predefined_hostname
        
        # Получение IPv4 адресов
        stdin, stdout, stderr = ssh.exec_command("/usr/sbin/ip -4 addr", timeout=5)
        result_v4 = stdout.read().decode()
        
        # Получение IPv6 адресов
        stdin, stdout, stderr = ssh.exec_command("/usr/sbin/ip -6 addr", timeout=5)
        result_v6 = stdout.read().decode()
        
        ipv4_dict = {}
        ipv6_dict = {}
        
        # Обработка IPv4
        lines_v4 = result_v4.splitlines()
        for line in lines_v4:
            if "inet " in line and "scope global" in line:
                parts = line.strip().split()
                ip_with_mask = parts[1]
                interface = parts[-1]
                base_interface = interface.split(":")[0]
                if base_interface not in ipv4_dict:
                    ipv4_dict[base_interface] = []
                ipv4_dict[base_interface].append(ip_with_mask)
                
        # Обработка IPv6
        lines_v6 = result_v6.splitlines()
        for line in lines_v6:
            if "inet6 " in line and "scope global" in line:
                parts = line.strip().split()
                ip_with_mask = parts[1]
                interface = parts[-1]
                base_interface = interface.split(":")[0]
                if base_interface not in ipv6_dict:
                    ipv6_dict[base_interface] = []
                ipv6_dict[base_interface].append(ip_with_mask)
                
        ssh.close()
        return hostname, ipv4_dict, ipv6_dict
    except Exception as e:
        logging.error(f"Ошибка подключения к {host}: {e}")
        return host if predefined_hostname is None else predefined_hostname, {}, {}

# Функция для сбора данных со всех хостов из inventory
def collect_all_ip_data() -> Dict[str, Tuple[Dict[str, List[str]], Dict[str, List[str]]]]:
    ip_data = {}
    remote_hosts = read_inventory()
    for predefined_hostname, ip in remote_hosts:
        hostname, ipv4_ips, ipv6_ips = get_host_data(ip, predefined_hostname)
        ip_data[hostname] = (ipv4_ips, ipv6_ips)
    return ip_data

# Функция для форматирования данных в HTML
def format_to_html(ip_data: Dict[str, Tuple[Dict[str, List[str]], Dict[str, List[str]]]]) -> str:
    update_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
    html_content = f"Автоматически обновляемая страница. Последнее обновление: {update_time}<br/>"
    html_content += "<table><tr><th>Hostname</th><th>IPv4 Interfaces</th><th>IPv6 Interfaces</th></tr>"
    
    for hostname, (ipv4_interfaces, ipv6_interfaces) in sorted(ip_data.items()):
        # Форматирование IPv4
        if not ipv4_interfaces:
            ipv4_str = "Нет данных"
        else:
            ipv4_str = "<p>"
            for iface, ip_list in sorted(ipv4_interfaces.items()):
                combined_ips = " ".join(sorted(ip_list))
                ipv4_str += f"{iface}: {combined_ips}<br/>"
            ipv4_str = ipv4_str.rstrip("<br/>") + "</p>"
            
        # Форматирование IPv6
        if not ipv6_interfaces:
            ipv6_str = "Нет данных"
        else:
            ipv6_str = "<p>"
            for iface, ip_list in sorted(ipv6_interfaces.items()):
                combined_ips = " ".join(sorted(ip_list))
                ipv6_str += f"{iface}: {combined_ips}<br/>"
            ipv6_str = ipv6_str.rstrip("<br/>") + "</p>"
            
        html_content += f"<tr><td>{hostname}</td><td>{ipv4_str}</td><td>{ipv6_str}</td></tr>"
    
    html_content += "</table>"
    return html_content

# Функция для обновления страницы в Confluence
def update_confluence_page(ip_data: Dict[str, Tuple[Dict[str, List[str]], Dict[str, List[str]]]]):
    auth_str = f"{USERNAME}:{API_TOKEN}"
    auth_encoded = base64.b64encode(auth_str.encode()).decode()
    headers = {
        "Authorization": f"Basic {auth_encoded}",
        "Content-Type": "application/json"
    }
    
    try:
        response = requests.get(f"{CONFLUENCE_URL}/{PAGE_ID}", headers=headers, timeout=10)
        if response.status_code != 200:
            logging.error(f"Не удалось получить страницу Confluence: {response.status_code} - {response.text}")
            return
        
        current_page = response.json()
        current_version = current_page["version"]["number"]
        
        payload = {
            "id": PAGE_ID,
            "type": "page",
            "title": current_page["title"],
            "body": {
                "storage": {
                    "value": format_to_html(ip_data),
                    "representation": "storage"
                }
            },
            "version": {
                "number": current_version + 1
            }
        }
        
        response = requests.put(
            f"{CONFLUENCE_URL}/{PAGE_ID}",
            headers=headers,
            data=json.dumps(payload),
            timeout=10
        )
        
        if response.status_code == 200:
            logging.info("Страница в Confluence успешно обновлена!")
        else:
            logging.error(f"Ошибка при обновлении страницы: {response.status_code} - {response.text}")
    except Exception as e:
        logging.error(f"Ошибка при работе с Confluence: {e}")

# Основная логика
if __name__ == "__main__":
    logging.info("Запуск скрипта для обновления Confluence")
    ip_data = collect_all_ip_data()
    if ip_data:
        update_confluence_page(ip_data)
    else:
        logging.warning("Не удалось собрать данные с хостов")
    logging.info("Скрипт завершил выполнение")
